[tool.poetry]
name = "telegram-ai"
version = "1.0.0"
description = "基于密钥授权的Telegram自动化交互工具，通过AI智能生成内容"
authors = ["TelegramAI Team"]
license = "Proprietary"
readme = "README.md"
packages = [{include = "telegram_ai", from = "backend"}]

[tool.poetry.dependencies]
python = "^3.12"  # 支持 Python 3.12+ 包括 3.13
# 核心依赖
telethon = "1.40.0"
cryptography = "45.0.5"
aiosqlite = "0.20.0"
fastapi = "0.111.1"
uvicorn = {extras = ["standard"], version = "0.30.5"}
pydantic = "2.8.2"
pydantic-settings = "2.4.0"

# ZeroMQ异步支持
aiozmq = "1.0.0"
pyzmq = "27.0.0"

# 异步增强
uvloop = {version = "0.20.0", platform = "linux"}
httpx = "0.27.0"
aiofiles = "24.1.0"

# AI和工具
openai = "1.40.0"
anthropic = "0.32.0"
# claude-code-sdk = "^1.0.0"  # 暂时注释，需要实际SDK
langchain = "0.3.0"
tiktoken = "0.7.0"

# 数据处理
orjson = "3.10.6"
pendulum = "3.0.0"
cachetools = "5.4.0"

# 安全和加密
rsa = "4.9"
python-jose = {extras = ["cryptography"], version = "3.3.0"}
passlib = {extras = ["bcrypt"], version = "1.7.4"}

# 日志和监控
loguru = "0.7.2"
rich = "13.7.1"
prometheus-client = "0.20.0"
sentry-sdk = "2.10.0"

# 工具库
python-dotenv = "1.0.1"
python-multipart = "0.0.9"
email-validator = "2.2.0"
jinja2 = "3.1.4"
click = "8.1.7"

[tool.poetry.group.dev.dependencies]
# 测试框架
pytest = "8.3.2"
pytest-asyncio = "0.23.8"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-benchmark = "4.0.0"
pytest-timeout = "2.3.1"
pytest-xdist = "3.6.1"
faker = "26.1.0"
hypothesis = "6.108.10"
respx = "0.21.1"

# 代码质量
black = "24.4.2"
ruff = "0.5.5"
mypy = "1.11.1"
isort = "5.13.2"
pylint = "3.2.6"
bandit = "1.7.9"
safety = "3.2.5"

# 开发工具
ipython = "8.26.0"
ipdb = "0.13.13"
pre-commit = "3.8.0"
commitizen = "3.28.0"
bump-my-version = "0.24.3"

# 文档
mkdocs = "1.6.0"
mkdocs-material = "9.5.30"
mkdocstrings = {extras = ["python"], version = "0.25.2"}

# 类型存根
types-aiofiles = "^24.1.0"
types-cachetools = "^5.4.0"
types-python-jose = "^3.3.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR",    # pylint refactor
    "COM812", # missing trailing comma
    "RUF001", # 允许中文全角字符
    "RUF002", # 允许中文全角字符
    "RUF003", # 允许中文全角字符
    "ARG002", # 允许未使用的方法参数（可能在子类中使用）
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "T20", "ARG", "PLR2004"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "telethon.*",
    "aiozmq.*",
    "uvloop.*",
    "sentry_sdk.*",
    "prometheus_client.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra
    -q
    --strict-markers
    --strict-config
    --cov=telegram_ai
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --timeout=300
"""
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0105",  # pointless-string-statement
]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
severity = "medium"
confidence = "medium"

[tool.poetry.scripts]
telegram-ai = "telegram_ai.main:main"
telegram-ai-worker = "telegram_ai.worker:main"
telegram-ai-migrate = "telegram_ai.database:migrate"

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "backend/telegram_ai/__init__.py:__version__"
]